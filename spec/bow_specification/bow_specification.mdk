Title         : Bunch of Wires PHY Specification
Subtitle      : The Open Domain-Specific Architecture BoW Workstream
Author        : Mark Kuemerle, Ramin Farjad,  Ken Poulton, Suresh Subramaniam, Bapi Vinnakota 
Logo          : True

Heading depth: 5
Document Class: [11pt]article
Package: [top=1in, bottom=1.25in, left=1in, right=1in]geometry
Package: fancyhdr

title,titlenote,titlefooter,h1,h2,h3,h4,h5 {
  font-weight: bold;
}

~center
![bowspec_logo]

[bowspec_logo]: images/bowspec_logo.jpg "bowspec_logo" { width:auto; max-width:90% }
~

[TITLE]

This document to be released under the following OCP copyright release:
{ page-break-before: always }

~center
COPYRIGHT LICENSE AGREEMENT
~

This Agreement (“Agreement”) is entered into on the date set forth below, 
(the “Effective Date”) by and between the Open Compute Project Foundation a 
Delaware corporation (“OCP”) and the entity identified below (“Licensor”).

WHEREAS, Licensor is the owner of and/or has certain rights in or to the 
works of authorship identified in the attached Exhibits (collectively, the “Work”).

WHEREAS, OCP desires to copy, distribute, make derivative works of and publish 
the Work and derivate works thereof, including without limitation in one or more 
OCP publications and/or on OCP’s website, and Licensor will benefit from OCP’s 
use of the Work as described in this Agreement.

NOW THEREFORE, in consideration of the promises in this Agreement, the parties 
agree as follows:

1.     Structure of the Agreement. There may be multiple Exhibits to this Agreement. 
Each Exhibit will be signed by an authorized representative and will be governed by 
and subject to the terms set forth in this Agreement, with the licenses applicable 
to the Work described therein effective as of the date the Exhibit is signed.

2.     License. Licensor hereby grants to OCP a non-exclusive, transferable (in 
accordance with Section 7 below), royalty free, fully-paid, perpetual, irrevocable, 
worldwide license, under Licensor’s copyrights in the Work, with the right to sublicense, 
to use, reproduce, create derivative works, distribute, and publicly display and 
perform the Work and derivative works thereof, in whole or in part, as a separate 
work or as part of a collective work. The foregoing will apply to all mediums now 
known or hereafter existing.

3.     Ownership of the Work / Other Rights Reserved. Except for the foregoing 
license, as between OCP and Licensor, Licensor retains all right, title and interest 
in and to the Work and all intellectual property rights therein. Licensor hereby 
reserves all rights not expressly granted in this Agreement. No additional licenses 
or rights whatsoever (including without limitation any patent licenses) are granted 
by implication, exhaustion, estoppel or otherwise.

4.     Representations and Indemnification. Licensor represents to OCP that: (i) Licensor 
is the sole and exclusive owner of the Work and all copyrights therein or Licensor has 
the right and authority to grant the licenses set forth in this Agreement and (ii) OCP’s 
exercise of the licenses set forth in this Agreement will not result in any infringement 
of any third party’s copyrights or the misappropriation of any third party’s trade secrets. 
Licensor agrees to indemnify and hold OCP harmless from and against any losses, damages, 
liabilities, settlement amount, costs and expenses (including reasonable attorneys’ fees) 
incurred by OCP in connection with any breach of the foregoing representations. This 
Section will survive the termination of this Agreement.

5.     Term and Termination. This Agreement will commence on the Effective Date and will 
terminate upon the written agreement of the parties or by written notice by OCP.

6.     Governing Law and Forum. This Agreement shall be solely and exclusively governed, 
construed and enforced in accordance with the laws of the Texas, USA, without reference 
to conflict of laws principles. Any suit, action or proceeding arising from or relating 
to this Agreement must be brought, solely and exclusively, in courts located in Travis 
County, Texas and each party irrevocably consents to the jurisdiction and venue of any 
such court.

7.     Assignment. OCP may assign this Agreement (a) with the consent of Licensor, not 
to be unreasonably withheld or delayed, or (b) upon notice, but without such consent, in 
connection with a merger, acquisition, change of control, or sale of substantially all 
the assets of OCP. This Agreement shall be binding upon and inure to the benefit of the 
parties and their successors and permitted assigns.

8.     Mutual Limits on Liability. Except as set forth below, in no event shall either 
party be liable to the other party in any manner, under any theory of liability, whether 
in contract, tort (including negligence), or other theory, for any indirect, consequential, 
incidental, exemplary, punitive, statutory or special damages, including lost profits, 
regardless of whether such party was advised of or was aware of the possibility of such 
damages. Except as set forth below, in no event shall the total, cumulative liability 
of either party regarding any and all claims and causes of action, under any theory of 
liability, whether in contract, tort (including negligence), or otherwise, exceed One 
Thousand Dollars ($1,000). The limitations set forth in this Section will not apply to 
liability arising under Section 4 (Representations and Indemnification) above. This 
Section will survive termination of this Agreement.

9.     Entire Agreement. This Agreement constitutes the entire agreement between the 
parties with respect to its subject matter and it supersedes all prior or contemporaneous 
oral or written agreements and representations concerning the subject matter herein. This 
Agreement may be amended only in a written document signed by both parties. This Agreement 
shall not be interpreted or construed against the party preparing it.
10.  Counterparts and Facsimile Signatures. This Agreement may be executed in counterparts 
all of which taken together shall constitute one single agreement between the parties. A 
facsimile transmission of the executed signature page of this Agreement shall constitute 
due and proper execution of this Agreement by the applicable party.
{ page-break-after: always }

[TOC]

[TITLE]

# Introduction 
The Bunch of Wires (BoW) is a simple, open and interoperable 
physical interface between two chiplets or chip-scale-packages (CSP) 
in a common package. This document specifies the BoW interface PHY layer.


## Objectives
The BoW interface is a set of die-to-die parallel 
interfaces that provides the flexibility to trade off throughput/chipedge for 
design complexity, cost, and packaging technology. 

The use of BoW is expected to be confined to connect die
placed close to one another within the same package. 
In this environment, signal attenuation is small and the interface can be simple.

The definition of the BoW interface aims to meet the following design 
objectives:

* Inexpensive to implement 
* Portable across IC process nodes ranging from 65 nm to 5 nm
* Flexible to support both existing and advancing packaging technologies
* Portable across multiple bump pitches
* Unencumbered by technology license costs
* Very low power (< 1 pJ/bit) as defined by Tx IO Pad, wire and Rx IO Pad.
* Very low latency (<5 ns without FEC, <15 ns with FEC from link layer to link layer)
* High throughput density (100-1000 Gb/s/mm-chip-edge)
* Backwards compatible (across at least two major specification versions)

## Advantages

The Bunch of Wires interface provides several key advantages for chiplet-based systems:

* Can operate at higher data rates per pin than existing parallel standards 
  * or at lower data rates for compatibility with existing parallel standards
* Can be implemented in legacy technologies (process nodes) with generally available IP
* Can be implemented in low-cost laminates or higher-density silicon-based interconnect
* Can be implemented with much less design effort than a traditional SERDES
* Is not constrained to a specific bump pitch
  * interfaces with somewhat different bump pitches can be connected

Compared to serdes, BoW uses a lower data rate/wire and so it requires more wires. 
But the lower data rates allow use of single-ended signaling and denser wire packing.
In addition, in laminates, BoW can take advantage of multiple wiring layers and in advanced packaging
it can take advantage of the much-increased wire density.

## Scope
The scope of this document has several levels.

1. The specification of the BoW interface includes these requirements:
  a. Operating modes
  b. Chip-to-chip wire signals
  c. Wire ordering
  c. Timing and electrical specifications on the chip-to-chip interface
  d. Signals at the link layer interface
  e. Configuration, initialization, calibration
  f. Functions that must be supported at the link layer or above

1. The specification includes recommendations for these elements:
  a. Bump patterns
  b. Arrangement of multiple slices in a link
  c. Arrangement of wires in laminate and advanced packaging
  a. signal integrity of the wire channel
  d. Configuration and management programming
  e. Design for test and test methods
  f. Performance estimates
  e. Compliance verification

1. The following activities are outside the scope of this document:
  a. Specific implementations of the interface
  a. Integration of the interface with system-level data flow e.g. interface to a 
   PHY-layer abstraction such as PIPE/PCIe interface to the BoW
  a. The use of this interface outside of a package or entirely inside a chip
  a. Definition of protocols for logical data transfer

1. The following aspects are intended to be addressed in subsequent versions 
of this specification:
  a. Simultaneous bidirectional data (full duplex on each wire)
  a. Security

## Language
* "Shall" or "must" indicates a requirement.
Failure to meet the requirement results in non-compliance
* "Should" indicates a strong suggestion, but not a requirement.
Failure to implement the suggestion does not result in non-compliance.
* "May" indicates an implementation option.
* The lack of one of the above verbs indicates the material is informative.
* "Reference" indicates a reference design that is provided as example for explanation, 
but is not a requirement.

<XX
Note to spec writers: 
Avoid using more than one of the above specification verbs in a single sentence to avoid confusion. 
XX>

## Compliance Summary

The specifications must be met over process variation, supply voltage range and 
temperature range (PVT). 
Each implementation must document its supported supply voltage range and temperature range.

Table XX will summarize the compliance points that shall be met in order to comply 
with the BoW specification. Each of the 
compliance points is discussed in the specification.



Table [#tab-compliance] below summarizes these signals.
~ Framed {color: blue}
Todo: Need to fill in this table:
~

~ TableFigure {#tab-compliance; caption: "BoW Compliance Summary"; }
+---------+------------------------------+
| Section | Description                  |
+---------+------------------------------+
| 2.3     | BoW Modes                    |
| 3.1     | Chip to chip signals (wires) |
| [#sec-bow-components] | Wire order                   |
|         |                  Much more....            |
+---------+------------------------------+
~

~ Framed {color: blue}
Do we also need a discussion of interoperability?
~


# BoW Overview
Chiplet-based designs require physical and logical connectivity between the die in a
single package. This section provides an overview of the BoW physical 
interface (PHY), its use in a multi-chiplet design, and how with the Open Domain-Specific 
Architecture stack it can be used as an underlay for popular transaction protocols.

## BoW Slice
BoW is an energy-efficient, easy-to-use PHY
interface between a pair of die inside a single package 
as shown in Figure [#fig-bow_overview2].
The BoW PHYs between two die are physically
connected through wires on a substrate or interposer. 
A BoW PHY does not have enough drive strength for off-package interfaces,
nor is it designed for buses that are entirely on die.

The BoW PHY is defined as a single unidirectional slice. 
Multiple slices are combined to create links of the desired throughput.
A link may be symmetric, asymmetric or unidirectional.

~ Figure { #fig-bow_overview2; caption: "BoW Overview" }
![bow_overview2]
[bow_overview2]: images/Bow-link-PHY-wires2.png { width:auto; max-width:70% }
~

<xx
~ Figure { #fig-bow_overview; caption: "BoW Overview" }
![bow_overview]
[bow_overview]: images/bowspec_figintro.jpg { width:auto; max-width:70% }
~
XX>

A BoW PHY slice either transmits or receives 16 bits of data between die. 
Since the BoW is a source-synchronous PHY, each transmitting
PHY slice transmits a complementary clock signal CLK+ and CLK- with the data.
A BoW PHY optionally has two additional wires designated 
FEC (for Forward Error Correction) and 
AUX, for other optional functions such as Data Bus Inversion (DBI). 

## BoW Modes

A BoW interface must conform to one of the Bow Modes seen in Table [#tab-levels].

~ TableFigure {#tab-levels; caption: "BoW Levels"; }
+----------+----------------+---------------+-------+
|BoW Mode | Slice Bit Rate | Wire Bit Rate | TxClk |
|          | Gb/s           | Gb/s/wire     | GHz   |
+----------+----------------+---------------+-------+
| BoW-32   | 32             | 2             | 1     |
| BoW-64   | 64             | 4             | 2     |
| BoW-128  | 128            | 8             | 4     |
| BoW-256  | 256            | 16            | 8     |
+----------+----------------+---------------+-------+
~
The BoW Mode defines the speed of clock and data of the PHY on the die-to-die wires.
In all modes, the data must be clocked DDR: 
the data wire bit rate is double the clock wire frequency.
All BoW interfaces must be able to interoperate with all the lower modes.
Supporting rates other than the defined four modes is an implementation choice.
There is more detail on BoW Modes in section [#sec-bow-modes].

~ Figure {#fig-bowspec_tradeoff2; caption: "BoW Data Rate vs. Reach tradeoff"}
![bowspec_figtradeoff2]
[bowspec_figtradeoff2]: images/Bow-tradeoff2.png {width:auto; max-width:70% }
~

Figure [#fig-bowspec_tradeoff2] shows the tradeoff between package, data rate, termination,
and reach. 
Source-terminated BoW on laminate allows a longer reach than advanced packaging, 
but the wider design rules in laminate means that both of these cases are barely able to 
reach 8 Gb/s/wire.
A doubly-terminated link offers longer distances and higher rates, but 
requires a more complicated receiver design.

## PHY - Link Layer Interface

The speed at the link layer interface (Figure [#fig-bow_overview2]) is implementation-dependent.
Typically, PCLK will be the TxClk frequency divided by a power of 2, so 250, 500 and 1000 MHz
are common rates.
The data at the link layer interface is SDR (bit rate equal to PCLK frequency).


## BoW Wires
Within the package, the BoW datapath is transported on physical passive wires between 
the pair of connected die. The specifics of the wires, such as their density,
maximum length, impedence characteristics and how they are realized vary with
the packaging technology. In order to minimize power, unterminated and source-terminated
links will have short reaches requiring chips to be adjacent.


## BoW for Common Transaction Protocols
Two connected die in a multi-chiplet device need to exchange logical information. 
The ODSA aims to define an open physical and logical interface for chiplets, as shown in 
Figure [#fig-odsa-stack] to enable chiplets from multiple vendors to interoperate and be 
integrated in a multi-die package. The Bunch of Wires is an open D2D PHY option in the
interface. The logical component of the ODSA interface aims to 
support protocols used for the two most common chiplet use cases, package 
aggregation and die disaggregation across a wide range of open and proprietary D2D PHYs
such as PCIe, CXL, CCIX, AXI and proprietary streaming protocols. 

~ Figure {#fig-odsa-stack; caption: "The BoW PHY in the ODSA Stack"}
![bowspec_figstack]
~
[bowspec_figstack]: images/bowspec_odsa_stack.jpg "bowspec_figure1" {width:auto; max-width:100%}

The ODSA stack abstracts
the PHY layer from the logical interface by using the well-defined abstraction interfaces
PIPE and LPIF. 
Any logic transaction controller, such as a PCIe controller, that
supports a PIPE or LPIF interface can use any D2D PHY that also supports that
interface as its physical layer.
As shown in Figure [#fig-odsa-stack], the BoW interface may receive data
through either the PIPE or LPIF interfaces to support common transaction protocols. 
For this use case, some BoW-specific adapter logic will be needed to support the requirements of PIPE 
or LPIF.
The specifications for these adapters are outside the scope of this document. 
Figure [#fig-bow-pcie] shows how the
BoW with an PIPE adapter can be interfaced to a PCIe controller.

~ Framed {color: blue}
Bapi: please remove "serializer" and "deserializer" from the labels in Figure [#fig-bow-pcie]
 - these are part of the PHY.
~

~ Figure {#fig-bow-pcie; caption: "BoW with a PIPE adapter for PCIe transactions"}
![bowspec_figcomponentspcie]
~
[bowspec_figcomponentspcie]: images/fig-bow_pcie.jpg {width:auto; max-width: 100%}

<XX .        Obsolete

## BoW Modes

BoW has been developed and specified such that multiple modes of operation can
be defined and supported. All modes must be 
interoperable with the minimum definition. All modes are source synchronous 
parallel interfaces using a differential clock that may operate at multiple.

The range of operating frequencies for a mode must be documented in a data sheet. 
frequencies. Beyond the basic mode, adding termination provides higher performance 
per mm of beachfront bandwidth but is more complex to design. It may also be possible
to get higher performance by using advanced packaging.

The BoW specification provides for optional technology to increase the data rate per wire, 
to enable a graceful cost-performance tradeoff. 
It is also possible for basic BoW configuration implemented with advanced packaging or 
between physically close chiplets to offer a higher data rate per wire than a terminated 
BoW interface in some configurations. 
A high level view of the BoW Interface Data-rate ranges is shown below:

All modes must be 
interoperable with the minimum definition. 
The various BoW modes are specified such that they can be directly connected 
to one another. ** When two interfaces are connected, data rate for the operating mode must be 
configured such that both ends support the same configuration at the same data rate.** All 
BoW implementations must support the minimum configuration of BoW (2Gbps datarate, 
1 Ghz clock rate, un-terminated IO). 

XX>

# Signal Definitions

<XX  Ken says: This section is a nearly a table of contents.  Do we need any of this?

Figures. [#fig-bowspec_ll_tx_slice_FIFO] and [#fig-bowspec_ll_tx_slice_noFIFO] provide 
a high level overview of the typical components that make up
a Tx slice. Figures. [#fig-bowspec_ll_rx_slice_FIFO] and [#fig-bowspec_ll_rx_slice_noFIFO] 
do the same for the Rx slice. The scope of this specification
is limited to the inputs and outputs, as well as the components shown in the light blue box. 
In this section, we cover the signal definitions for the
external [#sec-external-facing-signals] and link layer [#sec-link-layer-interface-signals] 
facing interfaces. In Sections [#sec-reset-and-initialization],[#sec-configuration],[#sec-calibration], the details pertaining
to reset, initialization, configuration, and the calibration state machine are specified. 
In Section [#sec-control-signal-shift-register-mapping], a
complete register definition for control and status signals is provided. 
Section [#sec-loopback-test] has details on testability. In 
Figures. [#fig-bowspec_ll_tx_slice_FIFO] - [#fig-bowspec_ll_rx_slice_noFIFO], 
the datapath shown is only for illustrative purposes, specific 
implementations are left to the designer. 
The BoW PHY can accommodate FIFO implementations that are internal or external to the PHY. 
Examples for the
Tx slice are shown in Figures [#fig-bowspec_ll_tx_slice_FIFO] - [#fig-bowspec_ll_tx_slice_noFIFO] 
and for Rx slice in 
Figures [#fig-bowspec_ll_rx_slice_FIFO] - [#fig-bowspec_ll_rx_slice_noFIFO]. 
However, the serialized/Deserializer fucntions with the 
appropriate gear ratios shall be implemented in the BoW PHY.

XX>

## Die-to-die Signals (Wires)

As shown in Figure [#fig-bow_overview2],
each BoW slice consists of a differential clock pair, 
16 single-ended data wires, and optional an optional pair of wires FEC and AUX.

Each BoW slice is unidirectional when in operation.
A chiplet may be designed with with Rx-only and Tx-only slices, or
each slice may have both Tx and Rx capability which is configured at runtime. 
A bidirectional link is composed of some number of slices configured for Rx and some for Tx.

FEC (Forward Error Correction) is an optional signal that allows using FEC to 
improve the bit error rate (BER). 
By using an additional wire when FEC is enabled, the payload data rate is not affected
and the wire data rate need not change.
This allows F(PCLK) = F(TxClk) / 2^n with FEC off or on, 
which simplifies the clock generation and serialization functions.
If used, FEC is implemented in the Link layer, and the PHY treats the FEC bit the same
as the other data bits. 

AUX is an optional signal that can be used for purposes
such as Data Bus Inversion (DBI), flow control, redundancy for defect repair, etc.
 
The Link layers of Chiplets A and B will need to agree on the details on FEC and AUX usage.
An implementation may choose to support the FEC and AUX wires, or to omit both of them.

Table [#tab-signals-d2d] summarizes these signals.

~ TableFigure {#tab-signals-d2d; caption: "BoW Signals at the Die To Die Interface"; }
|--------------|---------|------------|-------------|
| Function     | # Wires | Signal Name| Notes       |
+:-------------+:-------:+:-----------+:------------+
| Clock        | 2       | CLK+, CLK- | Differential|
|--------------|---------|------------|-------------|
| Data         | 16      | D0-15      |             |
|--------------|---------|------------|-------------|
|Forward Error | 0/1       |FEC         | Optional    |
|Correction    |         |            |             |
+--------------+---------+------------+-------------|
|Auxiliary     | 0/1        |AUX         | Optional    |
|--------------|---------|------------|-------------|
~

### DBI on the AUX wire

Data Bus Inversion (DBI) can be used to mitigate simultaneous switching
output (SSO) noise of a BoW PHY by reducing the number of BoW data wires
that switch between adjacent data transfer cycles. 
DBI functionality is optional; it one of several possible uses of the AUX wire.
DBI can be implemented in the PHY or in the Link layer.

Within a slice's 16 data signals, the TX DBI logic calculates the DBI bit 
based on the number of data signals changing from their previous state on the BoW slice wires. 

DBIcurrent = ((data[15]current XOR data[15]prev) 
+ (data[14]current XOR data[14]prev) 
... 
+ (data[1]current XOR data[1]prev) 
+ (data[0]current XOR data[0]prev)) > 8 ? 1 : 0); 

If the DBI bit=1 then the Tx DBI logic inverts the Data bits.
If DBI = 1 then the Rx DBI logic inverts the Data bits to recover the original data.



## Link Layer Interface - Clock and Data Signals

The data at the link layer interface must be SDR (bit rate equal to PCLK frequency).
Each Tx or Rx slice shall interface to the link layer with a datapath width of 32, 64, 128,
256 or 512 bits. 
The corresponding PCLK (Tx, or Rx)
shall have a frequency (datawidth\*PCLK) that matches the overall 
throughput on the output wires of the slice (16\*data_rate). 
This allows supporting a range of core logic speeds. 

The BoW PHY must contain the serialization or deserialization needed to 
go between the data rates at the link level interface and the wire interface.

A clock domain crossing (CDC FIFO) is required between the chip core and the PHY's
internal clocks; this can be either in the PHY or the link layer.
The CDC receives clocks from both the core and the PHY internal clocks, 
so PCLK flows towards the CDC as seen in the following four figures.

Example datapath implementations of the FIFO 
inside the PHY are shown in Figs [#fig-bowspec_ll_tx_slice_fifo], [#fig-bowspec_ll_rx_slice_fifo].
FIFO in the link level is shown in 
Figs [#fig-bowspec_ll_tx_slice_nofifo], [#fig-bowspec_ll_rx_slice_nofifo]. 
Note that these four figures are intended to illustrate
the signals at the perimeter of the PHY slices.
The details of the blocks internal to a slice is implementation-dependent.

~Framed {color=blue}
The following four figures need to be revised to show the MDIO interface to the Link layer
instead of going direct to I2C.
~


~ Figure { #fig-bowspec_ll_tx_slice_FIFO; caption: "BoW Link Layer and Tx PHY Slice with FIFO in the PHY" }
![bowspec_ll_tx_slice_FIFO]
~
[bowspec_ll_tx_slice_FIFO]: images/bowspec_LL_Tx_slice_FIFO.png { width:auto; max-width:90% }

~ Figure { #fig-bowspec_ll_tx_slice_noFIFO; caption: "BoW Link Layer and Tx Slice with FIFO in the link layer" }
![bowspec_ll_tx_slice_noFIFO]
~
[bowspec_ll_tx_slice_noFIFO]: images/bowspec_LL_Tx_slice_noFIFO.png { width:auto; max-width:90% }

~ Figure { #fig-bowspec_ll_rx_slice_FIFO; caption: "BoW Link Layer and Rx PHY Slice with FIFO in the PHY" }
![bowspec_ll_rx_slice_FIFO]
~
[bowspec_ll_rx_slice_FIFO]: images/bowspec_LL_Rx_slice_FIFO.png { width:auto; max-width:90% }

~ Figure { #fig-bowspec_ll_rx_slice_noFIFO; caption: "BoW Link Layer and Rx Slice with FIFO in the link level" }
![bowspec_ll_rx_slice_noFIFO]
~
[bowspec_ll_rx_slice_noFIFO]: images/bowspec_LL_Rx_slice_noFIFO.png { width:auto; max-width:90% }




### Link Layer Interface - Clock and Data Signal List

The signals in Table [#tab-mac_interface] shall constitute the data interface between the link layer 
and the PHY.

~ TableFigure {#tab-mac_interface; caption: "Link Layer Interface Signals"; width:100%;  }
|--------+--------+----------+----------+--------------------------------------------------------|
| Signal | # Bits | Tx Slice | Rx Slice | Description                                            |
+--------+--------+----------+----------+--------------------------------------------------------+
| Data   | 16*K   | In       | Out      | Data                                                   |
+--------+--------+----------+----------+--------------------------------------------------------+
| FEC    | K      | In       | Out      | Forward Error Correction                               |
+--------+--------+----------+----------+--------------------------------------------------------+
| AUX    | K      | In       | Out      | Auxiliary uses                                         |
+--------+--------+----------+----------+--------------------------------------------------------+
| PCLK   | 1      | *        | *        | * Out if CDC is in Link Level, In if CDC is in the PHY |
+--------+--------+----------+----------+--------------------------------------------------------+
| TxClk  | 1      | In       | NA       | Comes from a PLL or other clock source, not the Link layer.  |
|        |        |          |          | The TxClk source is usually shared among many Tx slices.  |
+--------+--------+----------+----------+--------------------------------------------------------+
~



<XX   Ken says: This is redundant with section 3.1 and incorrect since it assumes Tx Rx pairs.
  
## Bow Physical Interface

The BoW interface comprises either a transmit or receive slice with three signal types:

* Data signals
  * Inputs (RX): data input signals to the interface
  * Outputs (TX): data output signals from the interface
* Optional signals 
  * AUX/Data bus inversion out (tx_AUX_DBI), sent from the interface
  * Forward Error Correction out (tx_FEC), sent from the interface
  * AUX/Data bus inversion in (rx_AUX_DBI), input to the interface
  * Forward Error Correction in (rx_FEC), input to the interface
* Clocks
  * Data clock out (tx_fwd_clk), sent from the interface
  * Data clock in (rx_fwd_clk), input to the interface


~ Figure { #fig-bow_signals; caption: "BoW Signal Types" }
![bow_signals]
~
[bow_signals]: images/bow_signals_types.png { width:auto; max-width:70% }

~ TableFigure {#tab-bow_interface; caption: "BoW Interface Signals"; width:100%;  }
+---------------------------+------------------------------------------------------------+
|          Signal           |                         Description                        |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
|           TX              |            Synchronous data transmitted from the           |
|                           |               interface.                                   |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
|           RX              |             Synchronous data received from the             |
|                           |                interface.                                  |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
| tx_fwd_clk/tx_fwd_clkb    |           Transmit transfer clock, forwarded from          |
|                           |           the transmitter to its link partner for          |
|                           |        capturing received data.                            |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
| rx_fwd_clk/rx_fwd_clkb    |          Receive transfer clock, forwarded to the          |
|                           |        receiver from its link partner for capturing        |
|                           |             received data.                                 |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
|       tx_AUX_DBI          |         Optional signal from the transmitter to its        |
|                           |           link partner to indicate bus inversion           |
|                           |     status. If not used as DBI, this signal can also be    |
|                           |            used as Mode bit                                |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
|       rx_AUX_DBI          |            Optional input signal to receive bus            |
|                           |    inversion status. If not used as DBI, this signal can   |
|                           |        also be used as Mode bit                            |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
|         tx_FEC            |                Optional signal to carry FEC                |
|                           |          information from transmitter to its link          |
|                           |                partner.                                    |
+---------------------------+------------------------------------------------------------+
|                           |                                                            |
|         rx_FEC            |            Optional input signal to receive FEC            |
|                           |             information.                                   |
+---------------------------+------------------------------------------------------------+
~
XX>



<XX .  Obsolete - assumes paired Tx+Rx
+-------------------------+-------------+----------------------------------------------------------------+
| Signals                 | Tx slice    |Description             |
+-------------------------+-------------+----------------------------------------------------------------+
| data                    | In            | 32 to 256 bits         |
+-------------------------+-------------+--                                      |                        |
|                         |             |                                           |                        |
|                         |             |                                           |                        |
| PCLK .                  | towards CDC | towards CDC                               | Parallel Clock between |
|                         |             |                                           | LL and PHY slice       |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| rx_pclk                 | In/Out      | Parallel Clock between                    |                        |
|                         |             | LL and Rx slice                           |                        |
|                         |             | In (if FIFO in Slice), Out(if FIFO in LL) |                        |
|                         |             |                                           |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| tx_mac_rdy              | In          | For resetting Transmit data               |                        |
|                         |             | transfers and communicating               |                        |
|                         |             | LL readiness for calibration to           |                        |
|                         |             | the link partner                          |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| rx_mac_rdy              | Out         | Indicates that the Receive LL is          |                        |
|                         |             | ready to transmit data                    |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| tx_adapter_rstn         | In          | Resets the BoW Adapter                    |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| tx_dcc_dll_lock_req     | In          | Initiates calibration of transmit         |                        |
|                         |             | slice and its link partner (receive       |                        |
|                         |             | slice) for a BoW interface                |                        |
|                         |             |                                           |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| rx_dcc_dll_lock_req     | In          | Initiates calibration of receive          |                        |
|                         |             | slice and its link partner (transmit      |                        |
|                         |             | slice) for a BoW interface                |                        |
|                         |             |                                           |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| tx_transfer_en          | Out         | Indicate that calibration on the          |                        |
|                         |             | Transmit is complete for transmit         |                        |
|                         |             | and receive paths                         |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| rx_transfer_en          | Out         | Indicate that calibration on the          |                        |
|                         |             | Receive is complete for transmit          |                        |
|                         |             | and receive paths                         |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| Signals indicating any  | Out         | Sent to LL for possible                   |                        |
| conditions that may     |             | data- transfer ready de-assertion         |                        |
| cause de-assertion of   |             | by LL                                     |                        |
| data-transfer ready     |             |                                           |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| Signals indicating any  | Out         | Sent to LL for possible                   |                        |
| conditions that may     |             | adapter reset by LL                       |                        |
| cause BoW Adapter       |             |                                           |                        |
| reset and recalibration |             |                                           |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
| User-defined shift-     | In          | For transmitting application-             |                        |
| register bits           |             | defined bits to the link partner          |                        |
|                         |             |                                           |                        |
|                         |             |                                           |                        |
+-------------------------+-------------+---+                                       |                        |
|                         |             |                                           |                        |
|                         |             |                                           |                        |
XX>


<XX  Ken sez: I have commented out this AIB-cloned control interface because
  it assumes that the PHYs are communicating directly over the I2C interface
  rather than relying on a controller.


## Control Signals


An BoW interface shall provide control and status bits for calibration and communication of 
control and status information between the transmitter(receiver) and receiver(transmitter) chiplets. 
These status bits shall be implemented as documented in Section XX.xxx.xx.


### Transmit Slice Shift Register

A Transmit slice shall include two shift registers: one for holding Transmit control and status 
signals to its link partner (the Transmit shift register), and one for receiving control 
and status signals from its interface partner (the Receive-copy shift register). 
The Transmit shift register shall contain 81 bits. The Receive-copy shift register 
shall contain 73 bits. All bits shall be implemented regardless of whether optional 
signals are implemented. Any signals not implemented shall permanently maintain their 
default values as defined in Table 50.


### Receive Slice Shift Register

A Receive slice shall include two shift registers: one for holding Receive control and status
 signals to its interface partner (the Receive register), and one for receiving  control 
 and status signals from its link partner (the Transmit-copy shift register). 
 The Receive shift register shall contain 73 bits. The Transmit-copy shift register 
 shall contain 81 bits. All bits shall be implemented regardless of whether optional
  signals are implemented. Any signals not implemented shall permanently maintain their
   default values as defined in Table 51

### Control Signals
 Control signals fall into one of the following categories:

* Calibration handshake
* Selective reset
* User-defined
* Reserved

The bits for any unused signals shall be maintained with default values for correct shift- register length.
The control signals are summarized in Table 11 and are detailed in Table 51.

### Calibration Status Signals

Calibration status signals shall be generated by internal state machines as described in Section 3.2.3.

### User-Defined Signals 

    User-defined signals are available for application use. 
    Since both sides need to understand the function of user-defined signals, 
    using these signals may limit chiplet interoperability. If implemented in an application, 
    user-defined signals should be described in the chiplet data sheet.

### Shift-Register Signals


~ TableFigure {#tab-control_signals; caption: "Control Signals"; width:100%; }

+---------------------+-----------------------------+--------------+---------------------+----------------------+         
|                     |                             |              | Signal  Origin      |    Bit Number        |
|                     |                             |              |                     |                      |
+---------------------+-----------------------------+              +                     +------------+---------+
|                     |                             |              |                     |            |         |
| Signal Name         | Signal Function             | Bits         | (Slice or LL)       | Transmit   | Receive |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
| Calibration         |                             |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| tx_dcc_cal_done     | TX DCC calibration complete | 1            | LINK PARTNER        | 68         | 31      |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| rx_transfer_en      | RX calibration complete     | 1            | LINK PARTNER        | 75         | 70      |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| rx_dcc_dll_lock_req | Start RX calibration        | 1            | LL                  | NA         | 69      |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| rx_dll_lock         | RX DLL locked               | 1            | LINK PARTNER        | 74         | 68      |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| tx_transfer_en      | TX calibration complete     | 1            | LINK PARTNER        | 78         | 64      |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| tx_dcc_dll_lock_req | Start TX calibration        | 1            | LL                  | NA         | 63      |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| Device_ID           | Chiplet ID                  | 4            | Transmit            | 8-11       | 32-35   |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| Link_ID             | Chiplet Link ID             | 4            | Transmit            | 12-15      | 36-39   |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| Slice_ID            | Chiplet Slice ID            | 5            | Transmit            | 16-20      | 40-43   |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| Power_on_reset      | PoR complete                | 1            | Receive             | 21         | 44      |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| tx_mac_rdy          | For resetting               | 1            | LL                  | 22         | 45      |
|                     | Transmit data               |              |                     |            |         |
|                     | transfers and               |              |                     |            |         |
|                     | communicating LL            |              |                     |            |         |
|                     | readiness for               |              |                     |            |         |
|                     | calibration to the link     |              |                     |            |         |
|                     | partner                     |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| rx_mac_rdy          | For resetting               | 1            | LL                  | 23         | 46      |
|                     | Receive data                |              |                     |            |         |
|                     | transfers and               |              |                     |            |         |
|                     | communicating LL            |              |                     |            |         |
|                     | readiness for               |              |                     |            |         |
|                     | calibration to the link     |              |                     |            |         |
|                     | partner                     |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| tx_adapter_rstn     | Reset BoW adapter           | 1            |LL                   | 24         | 47      |
|                     | signal from Transmit        |              |                     |            |         |
|                     | slice to Link Partner       |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| rx_adapter_rstn     | Reset BoW adapter           | 1            | Receive             | 25         | 48      |
|                     | signal from Transmit        |              |                     |            |         |
|                     | slice to Link Partner       |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| AUX_DBI             | Select DBI mode (1)         | 1            | LL                  | 26         | 49      |
|                     | or AUX mode (0)             |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
| User-defined        |                             |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| external_cntl[]     | Defined by protocol         | fo: 30       | LL or LINK PARTNER | 0-4        | 49-57   |
|                     | and/or application          |              |                     |            |         |
|                     |                             | le: 63       |                     | 26-65      | 28-30   |
|                     |                             |              |                     |            |         |
|                     |                             |              |                     |            | 0-26    |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
| Other               |                             |              |                     |            |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
|                     |                             |              |                     |            |         |
| Reserved            |                             |              | NA                  | 79         | 71      |
|                     |                             |              |                     |            |         |
|                     |                             |              |                     | 76-77      | 65-67   |
|                     |                             |              |                     |            |         |
|                     |                             |              |                     | 69-73      | 58-62   |
|                     |                             |              |                     |            |         |
|                     |                             |              |                     | 66-67      | 27      |
|                     |                             |              |                     |            |         |
|                     |                             |              |                     | 5-7        |         |
+---------------------+-----------------------------+--------------+---------------------+------------+---------+
~

XX>

## Link Layer Interface - PHY Control Signals

The signals in Table [#tab-mac_ctrl_interface] shall constitute the control interface from the link layer to the PHY.

~ TableFigure {#tab-mac_ctrl_interface; caption: "Link Layer Interface Control Signals"; width:100%;  }
|----------+--------+----------+----------+------------------------------------------------------------------------------|
| Signal   | # Bits | Tx Slice | Rx Slice | Description                                                                  |
+----------+--------+----------+----------+------------------------------------------------------------------------------+
| PHYReset    | 1      | In       | In       | Resets the BoW slice                                                         |
+----------+--------+----------+----------+------------------------------------------------------------------------------+
| PHYReady | 1      | NA       | Out      | 1 indicates that the clocks in the Rx PHY are aligned (DCCs and DLLs locked) |
+----------+--------+----------+----------+------------------------------------------------------------------------------+
| MDC      | 1      | In       | In       | Clock for MDIO serial control interface                                      |
+----------+--------+----------+----------+------------------------------------------------------------------------------+
| MDIO     |   1     | BiDi     |  BiDi    |  Data for MDIO serial control interface                                                                            |
+----------+--------+----------+----------+------------------------------------------------------------------------------+
~

Additional implementation-dependent signals may exist.

### PHYReset

The PHYReset pin is asserted by the Link layer to initialize the PHY.
The PHYReset signal shall reset the internal registers to their HW default states, 
which shall allow MDIO programming and internal self-alignment to take place.

The reset states are otherwise implementation-dependent and shall be documented in the datasheet 
of a particular implementation. 

### MDIO Serial Programming Interface

The MDC and MDIO pins control the programming and status readout of the PHY by the Link layer.
Per the spec at https://en.wikipedia.org/wiki/Management_Data_Input/Output
up to 32 slices may be connected to one bus and each slice may have up to 32 16-bit registers.

The MDIO bus interface shall operate at up to 25 MHz.

[ Need to add a real MDI spec reference. ]

### PHYReady

After the Rx slice clock self-alignments are complete, each Rx PHY slice shall assert its PHYReady pin.
These may be AND'd together by the Link layer or treated separately.
How an Rx PHY slice determines completion of the self-alignment is implementation-dependent. 
For instance, it can be determined by observing the settling of the DLL or by a simple timer.

### MDIO Register Map

The registers accessed by the MDIO Serial Programming Interface are implementation dependent.
The registers shall be fully documented in the datasheet of a particular implementation.

These registers may control:

* Configuration such as Tx vs. Rx, BoW Mode (TxClk rate), PCLK rate
* Test features such as loopback modes 
* External control of DCC, DLL
* Readout of status such as DCC and DLL self-alignment settings





# BoW Modes

## BoW Modes

A BoW interface must conform to one of the Bow Modes seen in Table [#tab-bow-modes].

~ TableFigure {#tab-bow-modes; caption: "BoW Modes"; }
+----------+----------------+---------------+-------+
|BoW Mode | Slice Bit Rate | Wire Bit Rate | TxClk |
|          | Gb/s           | Gb/s/wire     | GHz   |
+----------+----------------+---------------+-------+
| BoW-32   | 32             | 2             | 1     |
| BoW-64   | 64             | 4             | 2     |
| BoW-128  | 128            | 8             | 4     |
| BoW-256  | 256            | 16            | 8     |
+----------+----------------+---------------+-------+
~
The BoW Mode defines the speed of clock and data of the PHY on the die-to-die wires.
In all modes, the data must be clocked DDR: 
the data wire bit rate is double the clock wire frequency.
All BoW interfaces must be able to interoperate with all the lower modes.
Supporting rates other than the defined four modes is an implementation choice.

The recommended maximum wire reach for different packaging types and terminations is 
seen in Table [#tab-reaches].
Exceeding these reach values degrades the voltage margins at the receiver.
"Laminate" is intended to include organic laminate packages (a.k.a. "buildup) and similar 
technologies with approximately 25 um line and space rules.
"Advanced" is intended to include silicon interposer and similar technologies.  
These have much finer line and space dimensions, but traces are usually much
more resistive than in organic laminate packages and must operate with reduced trace lengths. 
Termination is not expected to be necessary for implementations targeting Advanced packaging.

~ TableFigure {#tab-reaches; caption: "BoW Wire Reaches"; width:100%;  }

+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
|          |               |       | Laminate     | Laminate          | Laminate          | Advanced     |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
|          |               |       | Unterminated | Source Terminated | Doubly Terminated | Unterminated |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
| Bow Mode | Wire Bit Rate | TxClk |  Reach       |  Reach            |  Reach            |  Reach       |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
|          | (Gb/s/wire)   | (GHz) | (mm)         | (mm)              | (mm)              | (mm)         |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
| BoW-32   | 2             | 1     | 10           | 20                | 50                | 4            |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
| BoW-64   | 4             | 2     | NA           | 10                | 50                | 2            |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
| BoW-128  | 8             | 4     | NA           | 5                 | 50                | 1            |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+
| BoW-256  | 16            | 8     | NA           | NA                | 50                | NA           |
+----------+---------------+-------+--------------+-------------------+-------------------+--------------+

~
Adding termination increases the speed and/or reach, at the expense of greater design complexity.

# BoW Physical Configuration

## BoW Components

~ Figure { #fig-components; caption: "BoW Link Components" }
![components]
~
[components]: images/bowspec_figure_components.PNG { width:auto; max-width:70% }


A BoW link between two chiplets is made up of
wires, slices, and stacks as seen in Figure [#fig-components].

* The signal traces in the package between chiplets are called **wires**.
* The basic unit is a **slice** with 18 or 20 signal bumps. 
It must have 2 bumps for the differential
clock and 16 single-ended data bumps.
It may also have the optional single-ended signals AUX and FEC. 
The long edge of a slice is parallel to the chip edge.
* Multiple slices may be placed in a **stack**. The slice positions are
designated A, B, C, etc, starting with the slice closest to the edge of the chip.
* A **link** from one chiplet to another must be composed of one or more
stacks placed along the chip edge. A link may be
configured with equal numbers of Rx and Tx slices,
or it may be asymmetric or one-way.

## Example Link

The minimal bidirectional reference link is shown in Figure [#fig-min_link].



~ Figure { #fig-min_link; caption: "BoW Minimal Bidirectional Reference Link" }
![bowspec_figure_min_link2]
~
[bowspec_figure_min_link2]: images/bowspec_figure_min_link2.png "bowspec_figure_min_link2" { width:auto; max-width:90% }

In this example, each chiplet has one Tx slice and one Rx slice, 
arranged in two one-slice stacks on each chiplet.

## Die-to-Die Signals

~ TableFigure {#tab-signals; caption: "BoW Die-to-Die Signals"; }
|--------------|----------|------------|-------------|
| Function     | # Signals| Signal Name| Notes       |
+:-------------+:--------:+:-----------+:------------+
| Clock        | 2        | CLK+, CLK- | Differential|
|--------------|----------|------------|-------------|
| Data         | 16       | D[15:0]    |             |
|--------------|----------|------------|-------------|
|Forward Error | 0/1      |FEC         | Optional    |
|Correction    |          |            |             |
+--------------+----------+------------+-------------|
|Auxiliary     | 0/1      |AUX         | Optional    |
|--------------|----------|------------|-------------|
~

Each BoW slice consists of a differential clock pair, 16 single-ended data wires, 
and optional wires FEC and AUX. Each BoW slice is unidirectional when in operation.
A PHY may be designed as Rx-only and Tx-only slices, or
each slice may have both Tx and Rx capability, one of which is selected at configuration time. 
A bidirectional link is composed of some number of slices configured for Rx and some for Tx.

FEC (Forward Error Correction) is an optional signal that allows using FEC to 
improve the bit error rate (BER).  AUX is an optional signal that can be used for purposes
such as DBI, flow control, redundancy, etc. Chiplets A and B will need to agree on
the details on FEC and AUX usage, which is defined in the Link layer.

## Bump Arrangements

The reference example in Figure [#fig-min_link]
uses hexagonal closest packing for the bumps: two rows for signal bumps and
one row for power and ground bumps. 
In this pattern, the wire pitch is half the bump pitch.
In order to maintain the closest bump packing, slices in rows B and D have a different bump
pattern than slices A and C.
But bump patterns are not specified by BoW; only the signal *ordering* at 
the chip edge is specified for interoperability. 

Alternate bump arrangements may include:

* 90-degree rotation of the hexagonal packing direction to decrease the wire pitch 14%;
* square bump arrays instead of hexagonal for regularity of layout; 
* more than two rows of signal bumps to decrease the wire pitch;
* different ordering of power and ground bumps;
* multiple power and ground rows.

An alternate slice arrangement may be to place the Tx and Rx slices side by side at the 
chip edges. This would take up more chip edge, but allow all the signals to run on the same 
package layer.

Somewhat different wire and bump pitches between two chiplets can be accomodated with 
fan-out in the chip-to-chip wires. This is limited by the max wire length.

## Cross Section

A cross section for an organic laminate (a.k.a. "buildup") package is shown in 
Figure [#fig-pkg_cross_section].

~ Figure { #fig-pkg_cross_section; caption: "Cross section of a BoW Link in an Organic Laminate Package" }
![pkg_cross_section]
[pkg_cross_section]: images/bowspec_figure_pkg_cross_section.PNG { width:auto; max-width:70% }
~

In an organic laminate package, signal layers should be alternated with ground layers 
in order to maintain a controlled impedance of 50 ohms. Each slice position (A, B, C, D) 
should be associated with one signal layer and there is no mixing 
of signals from multiple slices.

In any technology, the position-A slice on chiplet A must be connected to the position-A 
slice on chiplet B (one must be configured for Tx and one for Rx). 
The position-B slices are connected together, and so on.

There is no specified limit to the number of slices in a stack. 
In organic laminate, the practical limit in 2020 is an 8-2-8 laminate which supports 4 slices. 
Layers on the bottom side of the package typically cannot be used for BoW signals 
due to low via density passing through the thick central core layer.

In advanced packaging technologies, the shorter wire lengths allow the use of non-controlled-impedance wires
and unterminated transmitters and receivers.
The smaller wire and space dimensions may allow
the wires for multiple slices to be interleaved on a single wiring layer.

## Signal Ordering 

A BoW interface must conform to these wire and slice order rules at the edge of the chip:

* The signals for a Tx slice are in the following order at the chip edge, 
going clockwise around the chiplet: 
AUX, D0, D1, D2, D3, D4, D5, D6, D7, CLK+, CLK-, D8, D9, D10, D11, D12, D13, D14, D15, FEC
* The signals for an Rx slice are in the reversed order (ascending goes counter-clockwise)
* The Tx slices in a link are numbered from 0 at the upper left edge of the link 
(facing from the chip center to the edge) and ascending through the Tx slices in a stack, 
then from stack to stack clockwise.
* The Rx slices in a link are numbered from 0 at the upper right, through the Rx slices in a stack,
then stack to stack counterclockwise.

These rules allow BoW chiplets to be connected without signal reordering regardless of chiplet rotations.

## Slice Pattern for Symmetric Links
For symmetric bidirectional links, an arrangement of alternating Tx and Rx stacks should be used.
Figure [#fig-alt_columns] shows a link with 8 Tx and 8 Rx slices on each side. 

~ Figure { #fig-alt_columns; caption: "Alternate Columns Pattern of Tx and Rx Slices in a Link" }
![bowspec_figure_alt_columns_4x4_link]
[bowspec_figure_alt_columns_4x4_link]: images/bowspec_figure_alt_columns_4x4_link.png "bowspec_figure_alt_columns_4x4_link" { width:auto; max-width:90% }
~

Using BoW-256 slices, this would make a link with 2 Tb/s each direction.

~ TableFigure {#tab-sizes; caption: "Dimensions for the link in Figure [#fig-alt_columns]"; width:100%;  }
|------------------|----------------|----------------|
| Dimension        |130 um laminate | 40 um advanced |
+:----------------:+:--------------:+:---------------+
| Width along edge | 5.2 mm         | 1.35 mm        |
+------------------+----------------+----------------+
| Depth from edge  | 1.6 mm         | 0.42 mm        |
|------------------|----------------|----------------|
~


The number of slices per stack that can be used depends on the number of package layers and type of 
packaging technology selected.

~ Framed {color: blue}
## OLD - Checkerboard Slice Pattern - OLD

For bidirectional links with more than one stack on each side, a checkerboard pattern of 
Tx and Rx slices should be used (Figure [#fig-checkerboard]).
This allows efficient connection of chiplets with differing stack depths and 
numbers of stacks. 
Figure [#fig-checkerboard] shows a bidirectional link with 4 stacks of 4 slices each, 
for 8 Tx and 8 Rx slices on each chiplet.

~ Figure { #fig-checkerboard; caption: "Checkerboard Pattern of Tx and Rx Slices in a 1.25 Tb/s Link" }
![checkerboard]
[checkerboard]: images/bowspec_figure_checkerboard.PNG { width:auto; max-width:70% }
~

~

An alternate approach may be used: design every slice to operate as either Rx or Tx to be configured
after assembly or upon powerup. 
This allows complete flexibility in interoperability and also provides an opportunity for
wafer-test loopback testing.

# Timing


## Clocking

~ Figure { #fig-clocking; caption: "BoW Clock and Data Block Diagram - One Tx Slice, One Rx Slice" }
![clocking]
[clocking]: images/bowspec_figure_PHY_block.PNG { width:auto; max-width:100% }
~

Figure [#fig-clocking] shows the clock and data flow for a single Tx slice and a single Rx slice.
On the Tx side, data bits (and optional FEC and AUX bits) come in a wide word from the link layer, 
and are serialized to the line rate. 
At the Rx side, they are sampled with a common slicer clock in most BoW implementations.
BoW-256 may optionally implement per-bit delay adjust or per-bit slicer clock adjust.

All BoW interfaces shall be DDR (Double Data Rate) at the chip-to-chip interface: 
the data bit rate is twice the clock frequency, 
so data is clocked in on both edges of the clock in the Rx slice.

The following table provides clock and data rates for an example with 4 Gbps wire data rate 
and M=4 to support a 1 Gbps data rate at the Link-PHY interface.

~ TableFigure {#tab-; caption: "Example Clock and Data Rates for Figure [#fig-clocking] with 4 Gbps, M=4"; width:100%;  }
|---------------------------------|--------|-----------|
| Signal                          |Rate    |SDR/DDR    |
+:-------------------------------:+:------:+:----------+
| TxClk                           | 2 GHz  |           |
+---------------------------------+--------+-----------+
| CLK+,CLK-                       | 2 GHz  |           |
| D[15:0],AUX,FEC                 | 4 Gbps | DDR       |
|                                 |        |           |
+---------------------------------+--------+-----------+
| PhyClk                          | 1 GHz  |           |
| P_D[63:0],P_AUX[3:0],P_FEC[3:0] | 1 Gbps | SDR       |
|---------------------------------|--------|-----------|
~

The ratio M should be limited to integers, preferrably powers of two, and other ratios 
implemented in a gearbox in the Link layer. 

The DDR clock TxClk is provided to the Tx PHY from elsewhere on Chiplet-A.
This may come from an on-chip PLL (typically shared across multiple slices) or it 
can be routed from the RxClk of an Rx slice on Chiplet-A. 
In order to meet duty cycle requirements, a Duty Cycle Corrector (DCC) may be needed in the
Tx slice. TxClk is used to drive the serializers and provide the output CLK+,CLK- to
Chiplet-B.

On the Rx side, the PHY must align the slicer clock to sample the data correctly.
This may be done with a DLL or adjustable delays or other methods.
The PHY shall include control logic to self-align the slicer clock for correct sampling of the data.
Alignment is started by signal AlignDll from the Rx Link Layer; 
the PHY provides a signal DllAligned to the Link Layer when it is complete.

All BoW interfaces shall be source synchronous within a slice. 
BoW-32 to BoW-128 interfaces do not require per-wire alignment - the signals
within a slice are aligned sufficiently well by matching their paths.
BoW-256 interfaces may need per-wire delay adjustment or per-slicer clock adjustment.

Clock skew between the slices in each direction of a link depends on the implementation of the
TxClk distribution to all the Tx slices. 
That is, for the data flow from Chiplet A to Chiplet B, 
the TxClk distribution on Chiplet A sets the 
the clock skew of the Tx slices on Chiplet A and the clock skew of the Rx slices on Chiplet B,
and vice versa for flow from B to A. This skew must be no more than 100 ps/stack along the chip edge.
There is no specification of the skew between TxClk on Chiplet A vs TxClk on Chiplet B.

On both the Tx and Rx sides, the Link layer must include a Clock Domain Crossing (CDC) to 
align the data between CoreClk and PhyClk. 
These CDCs must also be able to absorb the slice-to-slice clock skew and 
core clock distribution skew across the whole link.

If DCCs are included in the PHY and they need an alignment cycle, they shall include 
control logic to perform self-alignment.


## Clock and Data Specifications


### Timing Requirements 

Figure [#fig-eye] shows the definition of the eye diagram parameters.

~ Figure { #fig-eye; caption: "Eye Diagram Definitions" }
![eye]
[eye]: images/bowspec_figure_eye.PNG { width:auto; max-width:80% }
~

The CLK and data signals at the receiving slice bumps must meet the conditions in Table [#tab-integrity]

~ TableFigure {#tab-integrity; caption: "BoW Signal Integrity Requirements"; width:100%; }
<This table generated with https://www.tablesgenerator.com/markdown_tables# >

+---------+----------------------------+-----------------------------------+-------------------+
| Symbol  | Spec                       | Unterminated or Source Terminated | Doubly Terminated |
+---------+----------------------------+-----------------------------------+-------------------+
| V~hi~   | High signal voltage        | 750 mV                            | 562 mV            |
+---------+----------------------------+-----------------------------------+-------------------+
| V~lo~   | Low signal voltage         | 0 mV                              | 188 mV            |
+---------+----------------------------+-----------------------------------+-------------------+
| V~tol~  | Tolerance of Vhi, Vlo (5%) | \+- 37 mV                         | \+- 19 mV         |
+---------+----------------------------+-----------------------------------+-------------------+
| t~eye~  | Data eye width             | 50% UI                            | 50% UI            |
+---------+----------------------------+-----------------------------------+-------------------+
| V~eye~  | Data eye height            | 40%(V~hi~-V~lo~)                  | 20%(V~hi~-V~lo~)  |
|         |                            | (300 mV)                          | (75 mV)           |
+---------+----------------------------+-----------------------------------+-------------------+
| V~ov~   | Data and CLK overshoot     | 25%(V~hi~-V~lo~)                  | 50%(V~hi~-V~lo~)  |
|         |                            | (188 mV)                          | (188 mV)          |
+---------+----------------------------+-----------------------------------+-------------------+
| t~skew~ | Slice to slice CLK skew    | 100 ps/stack                      | 100 ps/stack      |
+---------+----------------------------+-----------------------------------+-------------------+


~

V~hi~ of 0.75 V must be supported by all BoW implementations, but other values
may be supported.

t~eye~ must be evaluated for each of the bits in a slice
relative to the differential CLK+ - CLK- signal for that slice.
t~eye~ must be evaluated for CLK edges up to 3 UI earlier than the eye center.
This is because even though jitter on the data edges is correlated with the CLK jitter at
the Tx side, the slicer in the Rx side is likely to use a different CLK edge due to
delays in the Rx-side clock alignment circuit (usually a DLL).
The evaluation of jitter must include all possible jitter contributors, 
including reference clock, clock distribution networks, 
any DCC, PLL and DLL jitter, power-supply noise and switching noise.

The slice to slice clock skew t~skew~ across the width of a BoW link (along the chip edge) 
must be less than 100 ps/stack.
This is dominated by the TxClk distribution network.

Since these signals do not leave the package, these values must be verified with simulation.

If the slice implementation allows programmatic control of the DLL alignment values, 
varying those values after locking the DLL may provide timing margin information.
If the slice implementation allows programmatic control of the receiver voltage 
thresholds, varying those values may provide vertical margin information.

<XX
### Reference Slice Timing

~framed {color:blue}
Is this section worth keeping?
~

XX>

<XX  COMMENT

~ Framed {color: blue}

This is a list of possible specs within a slice

* Clock to data alignment   NA before align, 50 ps after align = 0.20 UI
* data to data alignment    18 ps
  * mismatch: 0.6 ps rms at Rx input, 1.1 ps rums at Rx output
  * fanout skew: 1 mm = 6 ps as a tline
  * clock distn within slice: 0.6 mm = 7 ps as an RC line
* clock rise/fall time   80 ps = 0.30 UI
* clock duty cycle   50+-5% 
* CLK+ vs CLK- skew    10 ps = 0.04 UI
* clock random jitter  10 ps rms = 0.04 UI rms
* clock bounded jitter  20 ps pp = 0.08 UI pp
* Eye: 400 mV, 50 ps ??    330 mV, 50 ps barely works in 65 nm sim at 8 Gbps
* clock slip   0 ppm

Slice to slice:

* slice to slice clock skew across width of a link   < 3 ns 
   * 2.5 ns to go 30 mm, across 22 slices
~
XX END COMMENT>

<XX

The following table shows clock and data timing for a 4 Gbps BoW Basic 
reference design in 65 nm CMOS on 
laminate packaging. These values are for CLK and data bits at the bumps of the BoW receiver. 

~ TableFigure {#tab-clocks; caption: "BoW Clock Reference Values"; font-size:small; width:100%; }
<This table generated with https://www.tablesgenerator.com/markdown_tables# >
<any plus signs need a backslash added manually >
<column justification needs a ":" in the first "---" line added manually>
<XX

| Spec                          | Value  | Normalized Value | Condition                                 |
|:------------------------------|--------|------------------|:------------------------------------------|
| Bit to bit skew: fanout       | 0 ps   | 0.00 UI          | fanout for mismatched bump pitches        |
| Bit to bit skew: mismatch     | 3.6 ps | 0.014 UI         | 0.6 ps rms device mismatch (6 sigma)      |
| Bit to bit skew: clock distn  | 3.9 ps | 0.016 UI         | 0.65 mm from CLK to bits D0, D15          |
| CLK to mean data skew         | 12 ps  | 0.05 UI          | error of DLL alignment                    |
| CLK duty cycle                | 50%    | 0.50 UI          | target                                    |
| CLK duty cycle error          | 2%     | 0.02 UI          | after DCC settled                         |
| CLK+ vs. CLK- skew            | 3.6 ps | 0.014 UI         |                                           |
| CLK cyc-to-cyc random jitter  | TBD    |                  | thermal jitter of the whole Tx clock path |
| CLK cyc-to-cyc bounded jitter | TBD    |                  | bounded jitter of the whole Tx clock path |
| CLK rise/fall time            | 43 ps  | 0.17 UI          |                                           |
| Data rise/fall time           | 43 ps  | 0.17 UI          |                                           |
| Data Eye width                | 125 ps | 0.50 UI          | not including jitter                      |
| Data Eye height               | 450 mV | 60% Vswing       | Vswing = nominal signal voltage swing     |
| Data overshoot/undershoot     | 75 mV  | 10% Vswing       |                                           |
~

The jitter in a link should meet:

~center
DataEyeWidth - BitToBitSkewFanout - BitToBitSkewMismatch    
- BitToBitClockDistn - CLKtoMeanDataSkew - CLKdutyCycleError  
- CLKrandomJitter - DataToDataSkew < 0.10 UI
~
XX>

# Electrical Specifications

## Voltages

BoW implementations must support electrical specifications corresponding to 
rail to rail signaling based on a 0.75 V +/- 5% power supply as in as in Table [#tab-integrity] 
BoW interfaces may also upport higher or lower signaling 
voltages but must support 0.75 V based signaling to ensure interoperability.
BoW does not specify the VDD power rail voltage. 

## ESD 
BOW I/O shall be designed to withstand 50 V CDM (Charged Device Model) and 
250 V HBM (Human Body Model). 
This requirement is deemed sufficient for intra-package signalling, 
similar to other die-to-die interface standards.

## Termination and Return Loss

See Table [#tab-reaches] for the recommended termination vs. reach and mode.
In most cases, on laminate or similar packages, 
BoW transmitters should be source-terminated to 50 +/-8 ohms and BoW receivers unterminated.

For reach over 10 mm, BoW receivers should also be terminated in 50 +/- 8 ohms and designed 
for the smaller signal swings this delivers.

A terminated BoW transmitter or receiver (both data and clock) 
shall have 16 dB return loss (-16 dB S11 or S22) from 0 to F(CLK) and -4 dB loss
at 2*F(CLK) when outputting a logic 0, 1 or at the midscale voltage. 
See the trace "BoW Fast" in Figure [#fig-s11] for the BoW-128 case.

~framed {color:blue}
Need to update Figure [#fig-s11].
~


~ Figure { #fig-S11; caption: "BoW Termination Return Loss S11 and S22" }
![S11]
~
[S11]: images/bowspec_figure_S11.PNG { width:auto; max-width:60% }

A Source-Series-Terminated (SST) transmitter can generally meet the the transmitter specification.


# Chip-to-Chip Channel Specifications

The channel (wires) between chips should meet the following specs to ensure signal integrity.

## BoW Channel Specifications on Laminate

BoW channel length on laminate is limited by the round trip reflection delay to 10 mm for 4 Gb/s/wire.

BoW channels longer than 2 mm on laminate should meet these specs:

~ TableFigure {#tab-clocks; caption: "BoW Clock Specifications"; width:100%;  }
|-------------------------|----------------|---------|
|Parameter                |Value           | Comment |
+:-----------------------:+:--------------:+:-------:+
| Length mismatch within a slice |  1 mm   | = ~6 ps <= 0.05 UI |
+-------------------------+----------------+---------+
|Impedance                | 50\+-5 ohms    |         |
+-------------------------+----------------+---------+
| C~cross~/C~total~ ratio | < 40%          |         |
+-------------------------+----------------+---------+
|   R~series~             |  < 4 ohms      |         |
+-------------------------+----------------+---------+
~
C~cross~ is the total capacitance of a wire to all its neighboring wires.
C~total~ is the total capacitance of a wire including to grounds.

<XX
Stripline (buried) wires with 25 um line, 40 um space and 33 um dielectric thickness have 
C~cross~/C~total~ of 28% and an impedance of 48 ohms.
XX>

Channels on interposer will have different requirements, not yet specified.

<XX
~Framed {color: blue}
Interposers have only 4 layers, very thin dielectrics, 
cannot reach 50 ohm impedances without huge series R.  So they need to be designed differently.

Kens quick study found wire lengths from 570 to 1380 um 
(for 55 um bump pitch, 4-slice stack, 0.1 mm chip to chip spacing).
The best config looked like 3 um line and space, alternating signal and ground layers.
This gives a wire pitch of 1/9 the bump pitch, so we could even support 4 slices in just one
signal layer.
The line C for 1400 um is 0.76 pF, the R is 14 ohms, the RC is 11 ps, which is okay for 
8 Gb/s.
Source termination is probably not wanted in this case since there is so much Rline, 
the lines are short and
we cant build a reasonable controlled impedance line.

Is this enough data to spec a BoW Basic on interposer?  
Does anyone have more data?
~
XX>


## BoW Channel Specifications for Doubly-Terminated Links

Doubly-terminated links should meet the following characteristics.

### Channel Loss

To avoid the need for equalization, the channel should meet the limit in Figure [#fig-loss].

~ Figure { #fig-loss; caption: "BoW Doubly-Terminated Wire Channel Loss Limit" }
![loss]
~
[loss]: images/bowspec_figure4.jpg { width:auto; max-width:60% }


### Crosstalk

The crosstalk in the channel should meet the limit in Figure [#fig-xtalk].

~ Figure { #fig-xtalk; caption: "BoW Doubly-Terminated Wire Crosstalk Limit" }
![xtalk]
~
[xtalk]: images/bowspec_figure6.jpg { width:auto; max-width:60% }

Power-sum crosstalk is the sum of crosstalk power of all aggressors on a target trace.
The limit is
~center
XtalkLimit = -37*e^-f/8GHz^-10 dB
~

<XX
~Framed {color: blue}
Proposed text that needs numbers:

An example geometry which meets this limit is microstrip (surface) lines with 
X um line and Y um space, on Z um dielectric over a ground plane.
~

   
~Framed {color: blue}
What is the origin of the Xtalk Limit equation?  Is there a paper reference?

~
XX>



# Reset and Initialization

~Framed {color: blue}
## **EVERYTHING AFTER THIS POINT STILL NEEDS REVISION IN THE MAR 2021 REWRITE**
~

## Control Options


In a system with one or more BoW interfaces, each interface pair
 (defined as one Tx slice on a first chiplet and one Rx slice on a second chiplet)
 in the system shall achieve interface ready status in each of its component slices. 
 Once done, the interface shall signal readiness to the rest of the system. 
 If any BoW link or slice is down (either at the link layeror the PHY level), 
 it shall communicate this information to the appropriate interface partner as well as to the rest of the system.

Calibration and training will require the two endpoints of an interface to exchange status and control information.
 There is no dedicated sideband control interface defined. Instead, this exchange shall be facilitated 
 using an independent I2C (I3C) interface, assumed to exist outside of the BoW interface, on each chiplet.
  I2C(I3C) was chosen as the preferred interface for the following reasons:

* It is a two wire interface 
*	It is multi-point
* It supports multi-leader and multi-follower topology
*	The protocol for data reads and writes is standardized
*	It is widely used as a configuration/status monitoring interface 
*	It does not require additional control signals such as chip select (SPI, one per follower) or BSDL files (JTAG) to access register information

However, the system designer is free to choose any suitable method for their application.


An example BoW system configuration is shown in Figure 3. 
Any of the chiplets shown can act as an I2C (I3C) leader or follower. 
Alternatively, a central system controller (shown in dotted lines in the figure) 
shall behave as the leader and the BoW chiplets shall be followers.

To facilitate device identification and target communications at the proper device, 
link, and slice, each BoW Interface shall have a unique Device_ID, Link_ID, and Slice_ID. 
A BoW interface mapping table [connection topology] should also be     
provided by the system designer to facilitate proper assignment of link and 
slice states on each of the interface partners during initialization, calibration, or 
other sideband activity. The specifics of how this is topology information is propagated to 
each chiplet is left to the system designer.


~ Figure { #fig-bow_system; caption: "Example BoW System Configuration" }
![bow_system]
~
[bow_system]: images/bow_system.png { width:auto; max-width:70% }


##	Data-Transfer Ready
A data-transfer ready signal shall be made available for control by the link layer. 
The data-transfer ready signal may be de-asserted due to application-driven changes, including but not limited to:

* An intentional change in clock frequency
* Receipt of bad data

De-asserting the data-transfer ready signal may also be necessary due to conditions within the BoW interface, which may include but are not limited to:

* Completion of configuration during power-up
* Initiation of reset by the link partner
* Loss of DLL lock

Internal BoW conditions indicating the need for de-assertion of the data-transfer ready signal 
shall be sent to the link layerso that the link layercan de-assert the data-transfer ready signal.
Once data-transfer ready has been re-asserted after having been de-asserted, the 
BoW Adapter shall be re-calibrated (Section 11). The reverse is not true: 
calibration may be initiated without de-asserting data-transfer ready first.

##Standby Mode

A signal shall be placed into standby mode by one of the following means:

* Driving the signal LO
* Putting the signal into tristate and enabling the weak pull-down. During initialization, 
data outputs shall be placed into standby mode.

##	Data-Transfer Ready Signals

Each slice shall have a tx_mac_rdy signal that is controlled by the Transmit MAC. 
When the tx_mac_rdy signal is asserted HI by the MAC, it shall indicate that the 
transmit slice is ready for calibration and data transfer. De-assertion of 
tx_mac_rdy shall affect only its own slice; other slices may continue transmitting data.

    The tx_mac_rdy signal shall be forwarded to the link partner, and appropriate status 
    and control register shall be updated, in order to inform the Receive link layer
    that the Transmit link layeris or is not ready for calibration.

##	The Effects of De-asserting Data-Transfer Ready

While the tx_mac_rdy signal is de-asserted:

~framed {color:Blue}
[Note: because this is not a hardwired signal, there
 is a latency in response depending on the polling frequency of the I2C sideband interface. 
 Need to investigate whether there is a mechanism where each chiplet can become a 
 Leader dynamically and broadcast changes in status to its link partner]
~

* Data transmission shall halt
* Data outputs shall be placed into standby mode (Section 9.3)
* The clock output tx_fwd_clk shall go into standby mode.
* The reset signal tx_mac_rdy shall be sent to the interface partner in order to communicate that data transmission has halted and to allow for the interface partner to be reset.

The contents of any retiming registers in the data path shall be undefined following 
de- assertion of data-transfer ready.
De-assertion of the data-transfer ready signal shall not affect the
 free-running clock signals or the -control signals.
 
##	Initialization

Initialization will consist of three steps in sequence:

* Power-on reset synchronization
* Configuration
* Calibration 


~ Figure { #fig-bow_init; caption: "BoW Initialization " }
![bow_init]
~
[bow_init]: images/bow_init.png { width:auto; max-width:90% }

If there are multiple BoW interfaces on a single chiplet, 
they shall all come out of configuration at the same time, 
but they may complete adapter reset and calibration at different times depending on implementation.

## Power-on Reset Synchronization
Power-on reset, being the first step in initialization, shall not require 
any features enabled by configuration, since configuration will not occur until after power-on reset.

##	Power-on Reset Signals
One signal (register bit) shall participate in power-on reset: power_on_reset.

##	Power-on Reset Sequence
During power-on reset, all input and output signals shall be placed 
into standby mode (Section 9.3). The power-on reset sequence shall proceed as follows:

1.	If no paired device_ID signal is detected by the Receive, then the Receive may act both to ensure that it and its chiplet are in a safe state and to alert the MAC.
2.	If no paired device_ID signal is detected by the Transmit, then the Transmit may act both to ensure that it and its chiplet are in a safe state and to alert the MAC
3.	Each chiplet shall implement its own power-on reset routine. At the beginning of the routine, Receive interfaces shall assert their power_on_reset signals HI.
4.	When a chiplet completes its power-on reset sequence:
  a.	Transmit interfaces shall begin the configuration stage.
  b.	Receive interfaces shall de-assert their power_on_reset signals LO and begin the configuration stage.

##	Unused Interfaces
In order to ensure correct operation for chiplets with unused Transmit interfaces, the
power_on_reset  register bits for those unused interfaces shall be set HI.
In order to ensure correct operation for chiplets with unused Receive interfaces, the
Device_ID register bits for those unused interfaces shall be set  to 0x0000.

##	Test Provision

~framed {color:Green}
In order to test the power-on reset sequence at the wafer level, 
two signals shall be provided for use by automated test equipment to 
override the power_on_reset and device_detect signals when there 
is no Transmit/Receive pair available. por_ovrd overrides the power_on_reset signal, 
and device_detect_ovrd overrides the device_detect signal.
~

#Configuration

Configuration may include:

* Host chiplet configuration (in the case of an FPGA or similar chiplet)
* BoW interface configuration
* BoW redundancy activation

The tx_mac_rdy signal shall be de-asserted LO during configuration and shall be asserted HI when configuration completes and the chiplet is ready for calibration and data transfer. The clock input from the link layershall be stable prior to assertion of tx_mac_rdy.

##	Output State During Configuration

All outputs, including data outputs, shall be in standby mode (Section 9.3) during configuration. 

##	Chiplet Configuration

Configuration of any non-BoW aspects of the chiplet is outside the scope of this specification.

##	BoW Interface Configuration

All intended BoW features shall be configured at power-up.

## JTAG Configuration

The chiplet data sheet should document the configuration requirements that allow for successfully implementation of JTAG EXTEST and INTEST operations.

Control Shift Register Readiness

The control shift register shall be operational once configuration is complete.

##	Configuration Completion Signals

~framed {color:Green}
[Instead of conf_done, can we use this mechanism as a global interrupt to allow the side-band to 
respond with more immediacy or retain its conf_done status prior to calibration. 
Post link initialization, reuse it as a global interrupt signal. I think this can be 
done cleanly based on the status of a number of other signals participating in the initialization process]
~
Each chiplet shall have a conf_done signal. conf_done shall be an open-drain output. 
It shall be asserted LO when configuring, and it shall be released when configuration of 
all interfaces on the chiplet is complete, the analog circuits are stable, and the free-running 
clock is stable. conf_done shall indicate only that BoW configuration is complete. 
No other configuration completion (MAC, FPGA, etc.) shall be included in the generation of
the conf_done signal.

All conf_done signals from all chiplets of a module should be connected in a wired-AND 
configuration to generate a module-level CONF_DONE signal that shall be HI
 when all chiplets on the module have completed BoW configuration. The pull-up resistor 
 used to implement the wired-AND function may reside on the module containing the chiplets 
 with BoW interfaces, or it may reside off the module. The CONF_DONE signal should be 
 provided as an output of the module regardless of the resistor placement.


~ Figure { #fig-bow_config_complete; caption: "Configuration Complete Signals" }
![bow_config_complete]
~
[bow_config_complete]: images/bow_config_done.png { width:auto; max-width:70% }

Data outputs shall remain in standby mode (Section 9.3) until CONF_DONE is asserted,
including in the case where CONF_DONE is pulled low some time after being asserted high.

The resistance and VDD values should comply with

~ TableFigure {#tab-pull-up; caption: "Wired-AND Pull-up Specifications"; width:100%; }

+--------------------+-------+
| Parameter          | Value |
+--------------------+-------+
| Pull-up resistance | 1kOhm |
+--------------------+-------+
| Pull-up Vdd        | 0.9V  |
+--------------------+-------+
~

#	Calibration 

The calibration sequence shall proceed as follows:

* Adapter reset
* Data path calibration

A BoW interface shall have an tx_adapter_rstn signal that is asserted by the MAC. 
It shall be forwarded to the link partner of the interface through the register interface.


When either the Transmit (tx_adapter_rstn) or Receive (rx_adapter_rstn) adapter 
reset signal is asserted LO, the adapter shall reset the calibration state machines. 
If adapter reset follows de-assertion of data- transfer ready, tx(rx)_mac_rdy 
must be asserted HI before tx(rx)_adapter_rstn is asserted HI.

##	Data-Path Calibration

Data-path calibration shall be implemented via state machines on the Transmit
 and Receive sides of the interface that intercommunicate via the  control signals.


~ Figure { #fig-data_path_calibration; caption: "Data-Path Calibration Architecture" }
![data_path_calibration]
~
[data_path_calibration]: images/data_path_calibration.png { width:auto; max-width:90% }

Following the de-assertion of the adapter-reset signal(s), a calibration request
 shall be made by asserting a calibration request signal. Either the transmit or receive slice
 can initiate data path calibration.

Datapath calibration shall comply with Figure [#fig-data_path_state_machine]. The numbers in black indicate the sequence of steps



~ Figure { #fig-data_path_state_machine; caption: "Datapath Calibration State Machine" }
![data_path_state_machine]
~
[data_path_state_machine]: images/data_path_state_machine.png { width:auto; max-width:100% }

Signals used in the datapath calibration sequence are listed in Table [#tab-calib_signals].

~ TableFigure {#tab-calib_signals; caption: "Datapath Calibration Signals"; width:100%; }

+------------------------+----------------------------------------------------------+
|         Signals        |                        Description                       |
+------------------------+----------------------------------------------------------+
|                        |                                                          |
| rx_dcc_dll_lock_req    |        Request from Receive to start calibration.        |
|                        |       Once asserted,shall remain asserted until a        |
|                        |             new calibration is requested.                |
+------------------------+----------------------------------------------------------+
|                        |                                                          |
| tx_dcc_dll_lock_req    |        Request from Transmit to start calibration.       |
|                        |       Once asserted, shall remain asserted until a       |
|                        |             new calibration is requested.                |
+------------------------+----------------------------------------------------------+
|                        |                                                          |
|   tx_dcc_cal_done      |      Indicates that Transmit has completed its DCC       |
|                        |     calibration. Once asserted, shall remain asserted    |
|                        |         until a new calibration is requested.            |
+------------------------+----------------------------------------------------------+
|                        |                                                          |
|     rx_dll_lock        |       Indicates that Receive has completed its DLL       |
|                        |   lock procedure. Once asserted, shall remain asserted   |
|                        |         until a new calibration is requested.            |
+------------------------+----------------------------------------------------------+
|                        |                                                          |
|    rx_transfer_en      |     Indicates that Receive has completed its RX path     |
|                        | calibration and is ready to receive data. Once asserted, |
|                        |  shall remain asserted until calibration is complete.    |
+------------------------+----------------------------------------------------------+
|                        |                                                          |
|    tx_transfer_en      |     Indicates that Transmit has completed its TX path    |
|                        |       calibration and is ready to receive data.          |
+------------------------+----------------------------------------------------------+
~


## Adapter Reset

Data-path calibration shall be initiated when the link layerlayer asserts the 
tx_adapter_rstn signal LO. If the data-transfer ready signal was de-asserted prior 
to the start of calibration, then the tx_mac_rdy signal must be asserted HI prior 
to asserting the adapter-reset signals HI
The link layermust de-assert the adapter-reset signal prior to requesting calibration start.

## Calibration Request

Calibration can be requested by either the Transmit or the Receive slice 
using the tx_dcc_dll_lock_req signal or the rx_dcc_dll_lock_req signal, respectively.

~ TableFigure {#tab-calib_init; caption: "Calibration Initiation Signals"; width:100%; }

+-----------------------+---------------------+---------------------+
| Calibration Initiator | Dataflow direction  | Initiation signal   |
+-----------------------+---------------------+---------------------+
|                       |                     |                     |
| Transmit              | Transmit to Receive | tx_dcc_dll_lock_req |
+-----------------------+---------------------+---------------------+
|                       |                     |                     |
| Receive               | Receive to Transmit | rx_dcc_dll_lock_req |
+-----------------------+---------------------+---------------------+
~


Calibration for a dataflow direction shall commence when either Transmit 
and Receive side has asserted its calibration request signal for 
that dataflow direction. Calibration request signals shall remain asserted 
until a new calibration is requested.

## DCC Calibration

Upon receipt of an xx_dcc_dll_lock_req signal, the DCC shall be calibrated. 
The means of calibration is not specified and is left to the designer. 
If the optional DCC is not present, then the state machine in Section 11.1
 shall remain the same, with the DCC calibration state serving only to provide a 
 signal indicating DCC calibration completion.

## DLL Calibration
Following DCC calibration, the receiving DLL shall be calibrated. 
The means of calibrating the DLL is not specified and is left to the designer.
If the optional DLL is not present, then the state machine in Section 11.1
 shall remain the same, with the DLL lock state serving only to provide a signal indicating DLL lock completion.

## Calibration Completion

Calibration completion shall be indicated by the following signals.
 Full completion shall be indicated when all four signals are asserted HI. 
 All four signals, once asserted, shall remain asserted until a new calibration sequence is requested.

~ TableFigure {#tab-calib_complete; caption: "Calibration Completion Signals"; width:100%; }
+------------------------+-------------------------------+
| Calibration Completion | Meaning                       |
| Signal                 |                               |
+------------------------+-------------------------------+
|                        |                               |
| tx_transfer_en         | Transmit transmit block       |
|                        | has completed calibration.    |
+------------------------+-------------------------------+
|                        |                               |
| rx_transfer_en         | Receive receive block         |
|                        | has completed calibration     |
+------------------------+-------------------------------+
~



##	BoW Link Ready

When both tx_transfer_en and rx_transfer_en are true, then the link shall be ready to transmit data.

~framed {color:Green}

##Link Training

Link training will be addressed in a future revision of the spec
~

# Control-Signal Shift Register Mapping

The MDIO interface registers shall be fully documented in the PHY datasheet.

<XX .  Removed these definitions copied from AIB

## Transmit Control Register Definition

~ TableFigure {#tab-transmit_control; caption: "Transmit Control Signals"; width:100%; }
+------------+--------------------+-------+---------+----------------------------------+
| Bit        | Control Signals    | Bit   | Default | Description                      |
| Order      | from Transmit to   | Width | Value   |                                  |
|            | Receive            |       |         |                                  |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [79]       | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [78]       | tx_transfer_en     | 1     | 1       | Transmit output to Receive to    |
|            |                    |       |         | indicate that Transmit           |
|            |                    |       |         | transfer has been                |
|            |                    |       |         | enabled.                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [77]       | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [76]       | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [75]       | rx_transfer_en     | 1     | 1       | Receive output to Transmit       |
|            |                    |       |         | to indicate that Receive         |
|            |                    |       |         | is ready for data transfer.      |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [74]       | rx_dll_lock        | 1     | 1       | Receive output to Transmit       |
|            |                    |       |         | to indicate that RX DLL          |
|            |                    |       |         | achieves lock.                   |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [73:71]    | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [70:69]    | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         | Transmit output to Receive       |
| [68]       | tx_dcc_cal_done    | 1     | 1       | to indicate that                 |
|            |                    |       |         | DCC calibration is done          |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [67]       | Reserved           | 1     | 0       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [66]       | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [65:27]    | User defined       | 1     | 0       | For application use              |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [26]       | AUX_DBI            | 1     | 0       | AUX-0, DBI -1                    |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [25]       | rx_adapter_rstn    | 1     | 0       | Adapter                          |
|            |                    |       |         | reset signal from                |
|            |                    |       |         | Transmit to Receive              |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [24]       | tx_adapter_rstn    | 1     | 0       | Adapter                          |
|            |                    |       |         | reset signal from                |
|            |                    |       |         | Receive to Transmit              |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [23]       | rx_mac_rdy         | 1     | 0       | Data transfer ready signal       |
|            |                    |       |         | from the Receive to              |
|            |                    |       |         |  the Transmit                   |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [22]       | tx_mac_rdy         | 1     | 0       | Data Transfer                    |
|            |                    |       |         | ready signal from                |
|            |                    |       |         | Transmit to                      |
|            |                    |       |         | Receive                          |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [21]       | Power_on_reset     | 1     | 0       | Receive output to Transmit to    |
|            |                    |       |         | indicate power on                |
|            |                    |       |         | reset completion                 |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [16-20]    | Slice_ID           | 5     | x00     | Transmit Output to               |
|            |                    |       |         | Receive                          |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [12-15]    | Link_ID            | 4     | x0      | Transmit Output to               |
|            |                    |       |         | Receive                          |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [8-11]     | Device_ID          | 4     | x0      | Transmit Output to               |
|            |                    |       |         | Receive                          |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [7]        | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [6]        | Reserved           | 1     | 0       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [5]        | Reserved           | 1     | 1       | Reserved                         |
+------------+--------------------+-------+---------+----------------------------------+
|            |                    |       |         |                                  |
| [4:0]      | User defined       | 1     | 0       | For application use              |
+------------+--------------------+-------+---------+----------------------------------+

~

## Receive Control Register Definition

~ TableFigure {#tab-receive_control; caption: "Receive Control Signals"; width:100%; }

+------------+------------------------+-------+---------+------------------------------------+
| Bit        | Control Signals        | Bit   | Default | Descripition                       |
| Order      | from Receive to        | Width | Value   |                                    |
|            | Transmit               |       |         |                                    |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [71]       | Reserved               | 1     | 0       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [70]       | rx_transfer_en         | 1     | 1       | Receive output to Transmit         |
|            |                        |       |         | to indicate Receive Rx             |
|            |                        |       |         | is ready to receive data           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [69]       | rx_dcc_dll_lock_req    | 1     | 1       | DLL/DCC calibration request from   |
|            |                        |       |         | Receive RX to Transmit TX BoW to   |
|            |                        |       |         | start full DLL/DCC calibration.    |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [68]       | rx_dll_lock            | 1     | 1       | Receive output to Transmit         |
|            |                        |       |         | (adapterand PHY) to indicate       |
|            |                        |       |         | Receive DLL has achieved lock.     |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [67:65]    | Reserved               | 1     | 0       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [64]       | tx_transfer_en         | 1     | 1       | Transmit sends to Receive (adapter |
|            |                        |       |         | and PHY) that it is ready          |
|            |                        |       |         | for Trasnmit data transfer.              |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [63]       | tx_dcc_dll_lock_req    | 1     | 1       | PHY DLL/DCC calibration            |
|            |                        |       |         | request from Receive TX to         |
|            |                        |       |         | Transmit RX BoW to start full      |
|            |                        |       |         | DLL/DCC calibration.               |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [62]       | Reserved               | 1     | 0       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [61]       | Reserved               | 1     | 0       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [60]       | Reserved               | 1     | 1       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [59]       | Reserved               | 1     | 0       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [58]       | Reserved               | 1     | 1       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [57:50]    | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [49]       | AUX_DBI                | 1     | 0       | AUX-0, DBI -1                      |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [48]       | rx_adapter_rstn        | 1     | 0       | Adapter reset                      |
|            |                        |       |         | signal from the Transmit           |
|            |                        |       |         | to Receive                         |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [47]       | tx_adapter_rstn        | 1     | 0       | Asynchronous adapter reset         |
|            |                        |       |         | signal from the Receive            |
|            |                        |       |         | to Transmit                        |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [46]       | rx_mac_rdy             | 1     | 0       | Data transfer ready signal         |
|            |                        |       |         | from the Receive to Transmit       |
|            |                        |       |         |                                    |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [45]       | tx_mac_rdy             | 1     | 0       | Data Transfer ready signal         |
|            |                        |       |         | from the Transmit to               |
|            |                        |       |         | the Receive                        |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [44]       | Power_on_reset         | 1     | 0       | Receive output to Transmit         |
|            |                        |       |         | to indicate PoR completion         |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [40-43]    | Slice_ID               | 5     | x00     | Receive Output                     |
|            |                        |       |         | to Transmit                        |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [36-39]    | Link_ID                | 4     | x0      | Receive Output                     |
|            |                        |       |         | to Transmit                        |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [32-35]    | Device_ID              | 4     | x0      | Receive Output                     |
|            |                        |       |         | to Transmit                        |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [31]       | rx_dcc_cal_done        | 6     | 1       | Receive to notify Transmit         |
|            |                        |       |         | that DCC calibration is            |
|            |                        |       |         | complete.                          |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [30:28]    | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [27]       | Reserved               | 1     | 0       | Reserved                           |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [26:17]    | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [16]       | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [15]       | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [14]       | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [13]       | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+
|            |                        |       |         |                                    |
| [12:0]     | User defined           | 1     | 0       | For application use                |
+------------+------------------------+-------+---------+------------------------------------+

~

XX>

#Testability

## Test Pattern
Suggested test patterns are:

* PRBS-9 Pattern, defined  by polynomial of X^9^+ X^5^ +1

* PRBS-31 Pattern, defined by polynomial of X^31^ + X^28^ +1

Furthermore, to cover the DC wandering and single  bit response, the following suggested pattern should be added to the beginning of the preferred 
PRBS pattern.

['0'] X 10 + '1' + ['0'] X 10 + ['1'] X 10 + '0' + ['1'] X 10 + ['0'] X 10



~ Figure { #fig-Pattern; caption: "Stress Test Pattern" }

![Pattern]

[Pattern]: images/LB_Spec/wave_prbs.png { width:auto; max-width:100% }

~



## Loopback Test

A BoW interface will be used for loopback testing in two use cases: 
at wafer-sort time for chiplet test for full-system bring-up, and debug validation. 
  
  
  Wafer sort tests are currently only practical for the BoW interface with regular bump pitches (~130um), where ATE (automatic testing equipment) probe boards with matching pin pitches are available. Microbump probes will require additional effort.

Unidirectional links will need open-loop testing. 
In Tx-Open-Loop testing, shown in Figure [#fig_test_tx], Chiplet-A transmits a known test pattern (PRBS9 or PRBS31) to a golden reference receiver through the ATE load board. 
The received pattern is verified in the ATE load board.

Rx-Open-Loop testing, shown in Figure [#fig_test_rx], is used for a link where the DUT is only a receiver. 
A golden reference Tx transmits a known pattern (PRBS9 or PRBS31) through the channel to the chiplet. The received pattern will be analyzed for quality and functional tests. 



~ Figure { #fig_test_tx; caption: "Open loop Tx chiplet testing" }
![fig_test_tx]
[fig_test_tx]: images/LB_Spec/Slide2a.png { width:auto; max-width:100% }
~

~ Figure { #fig_test_rx; caption: "Open loop Rx chiplet testing" }
![fig_test_rx]
[fig_test_rx]: images/LB_Spec/Slide3a.png { width:auto; max-width:100% }
~

In bidirectional links, loopback tests can be implemented in two modes:

 * slice-to-slice short loopback mode: Data is looped back within the chip
 from a Tx slice to an Rx slice using on-chip switching (shown in Figure [#fig_test_sl]). 
 The short loopback path is configured by the ATE. 
 * intra-slice short loopback mode: A single slice containing both Rx and Tx paths sharing the same bumps
 can perform on-chip loopback testing simply by turning on both the Rx and Tx paths at once.
 This has more on-chip circuitry, but allows loopback testing with no switches or extra 
 lines connected to the bumps other than the Tx driver tristate switches. 
 Figure [#fig_test_sl] applies, except there is only one shared set of bumps for a Tx/Rx slice.
 * long loopback mode: 
 the PRBS pattern is generated by chiplet-A, sent over the replica channel on the ATE load board which loops it back 
 (shown in Figure [#fig_test_ll]). 
 The received pattern will be passed to a bit error rate tester (BERT) to analyze the performance of the link with off-chip data and clock wires.



~ Figure { #fig_test_sl; caption: "Short loopback testing" }
![fig_test_sl]
[fig_test_sl]: images/LB_Spec/Slide4.png { width:auto; max-width:60% }
~

~ Figure { #fig_test_ll; caption: "Long loopback testing" }
![fig_test_ll]
[fig_test_ll]: images/LB_Spec/Slide1a.png { width:auto; max-width:60% }
~


 



Both loopback modes can potentially be used for in-field validation bring-up and test. 
Cooperation across chiplets will be required to execute these tests in the field. 
Open-loop testing requires the use of a fixed test pattern recognized by both ends and is the only option for unidirectional links. 
Long loopback mode can be implemented on interposer or organic laminate for validation/verification purposes. 

Figure [#fig_test_cll] shows how a long loopback mode is executed across two chiplets for in-field validation and test 
where Tx and Rx are in different chiplets. Furthermore, this configuration can be expanded to loop back the data from the transmitter of chiplet-A to the receiver of chiplet-A. 


~ Figure { #fig_test_cll; caption: "Chiplet-to-chiplet long loopback" }
![fig_test_cll]
[fig_test_cll]: images/LB_Spec/Fig5.png { width:auto; max-width:80% }
~





